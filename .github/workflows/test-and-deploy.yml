name: Test & Deploy Grading Script to AWS Lambda

on:
  push:
    branches:
    - master
  workflow_dispatch:

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.8 ]
    
    defaults:
      run:
        working-directory: app/

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        python -m pip install -r tools/tools_requirements.txt
        python -m pip install -r requirements.txt
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test Handler functions
      run: |
        pytest -v tests/handling.py::TestHandlerFunction
    - name: Test JSON schema
      run: |
        pytest -v tests/validation.py::TestSchemaValidation
    - name: Test Grading functions
      run: |
        pytest -v tests/grading.py::TestGradingFunction
  
  
  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: test-boilerplate-question-type
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build docker image from algorithm, schema and requirements
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG app/
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Update lambda function image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: test-boilerplate-question-type
        LAMBDA_FUNCTION_NAME: test_question_type_boilerplate
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
